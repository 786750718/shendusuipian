;extensions [profiler]
;;;
;;; PwC Housing Market model
;;;
;;; written by Nigel Gilbert, n.gilbert@surrey.ac.uk
;;;
;;; Disclaimer
;;; This model has been prepared for general guidance on matters of interest only, and
;;; does not constitute professional advice.  The results are purely illustrative. You
;;; should not act upon any results from this model without obtaining specific professional
;;; advice.  No representation or warranty (express or implied) is given as to the accuracy
;;; or completeness of the model, and, to the extent permitted by law, PricewaterhouseCoopers,
;;; its members, employees and agents accept no liability, and disclaim all responsibility,
;;; for the consequences of you or anyone else acting, or refraining to act, in reliance on
;;; the model or for any decision based on it.
;;;
;;; This Housing Market model was developed by Nigel Gilbert with the assistance of John Hawksworth
;;;   and Paul Sweeney of PricewaterhouseCoopers and is licensed under a
;;;  Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License:
;;;  <a rel="license" href="http://creativecommons.org/licenses/by-nc-sa/4.0/"><img alt="Creative Commons License" style="border-width:0" src="http://i.creativecommons.org/l/by-nc-sa/4.0/88x31.png" /></a><br /><span xmlns:dct="http://purl.org/dc/terms/" property="dct:title">Housing Market model</span> by <a xmlns:cc="http://creativecommons.org/ns#" href="http://cress.soc.surrey.ac.uk/housingmarket/ukhm.html" property="cc:attributionName" rel="cc:attributionURL">Nigel Gilbert</a> is licensed under a <a rel="license" href="http://creativecommons.org/licenses/by-nc-sa/4.0/">Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License</a>.
;;;
;;; To refer to this model in academic literature, cite:
;;; Gilbert, N, Hawksworth, J C, and Sweeney, P (2008) 'An Agent-based Model of the UK
;;;   Housing Market'.  University of Surrey http://cress.soc.surrey.ac.uk/housingmarket/ukhm.html
;;;
;;;  version 0    NG 18 October 2007
;;;  version 0.1  NG 09 November 2007
;;;  version 0.2  NG 17 November 2007
;;;  version 0.3  NG 23 November 2007 (bug: new entrants with zero mortgage)
;;;  version 0.4  NG 08 December 2007 (bug: movers not recorded as being in new house;
;;;                                    house prices reduced after no sale; purchasers
;;;                                    only have upper bound limiting offer;
;;;                                    entrants exit after a period if they can't find
;;;                                    a house; realtors add a percentage on to the
;;;                                    average price of local houses in forming their
;;;                                    valuation
;;;  version 0.5  NG 02 January 2008  New processes for realtor valuations and for
;;;                                    making offers
;;;  version 0.6  NG 26 January 2008  Added affordability, interest rate, house
;;;                                    construction, sliders and code
;;;  version 0.61 NG 11 February 2008 Added demolish proc to allow houses to die
;;;  version 0.72 NG 24 March 2008    Redid house valuation to allow for quality
;;;  version 0.8  JH, NG 4 April 2008 Adjusted initial parameters for more realistic
;;;                                    behaviour
;;;               NG 5  April 2008    Added gamma distribution for income, and income
;;;                                    plot
;;;  version 0.9  NG 17 April 2008    Added gini coefficient plot, changed display icons
;;;  version 0.91 NG 18 April 2008    Added mortgage interest/income plot
;;;  version 9.2  NG 19 April 2008    Added time on market plot, v. cheap houses get demolished
;;;  version 10.2 NG 26 May 2008      Added gains from investment, re-did paint houses to
;;;                                    use quantiles,
;;;                                    re-did clustering, made sure realtors did not
;;;                                    over-value
;;;  version 10.4 NG 22 Jun 2008      Added fake realtor records at setup.  Added correct
;;;                                    mortgage interest calculations,
;;;                                    inflation, slider for ticks per year
;;;  version 1.1  NG 22 Jun 2008      Up and down shocks now defined in terms of
;;;                                    Affordability, rather than hardwired numbers
;;;                                    adjusted initial valuations to value houses for
;;;                                    sale at start better
;;;  version 1.2   NG 17 Jul 2008     Dealt with -ve equity, repayments > income, and
;;;                                    further corrections to handling of mortgages.
;;;                                    General tidy up.  This is the version used for the
;;;                                    ESSA paper
;;;  version 1.3  NG 5 Sept 2008       1st time buyers get fixed capital
;;;  version 1.4  NG 6 Sept 2008       Added initial savings slider and disclaimer
;;;  version 1.5  NG 20 Jun 2011       Upgraded to work with NetLogo 1.4.3
;;;  version 1.6  NG 21 Dec 2013       Upgraded to NetLogo 5.0.4 and open sourced under a Creative Commons licence
;;;  version 1.61 NG 24 Jan 2013       Corrected bug introduced in upgrading to NL 5.0.4

globals [
  scenario            ; to illustrate various step changes
  ;; these could become sliders
  initialVacancyRate  ; proportion of empty houses at start
  nRealtors           ; number of realtors
  min-price-fraction  ; if a house price falls below this fraction of the median price, it is demolished

  ; globally accessible variables (mainly here as globals so that they can be plotted)
  moves               ; number of households moving in this step
  interestPerTick     ; interest rate, after cyclical variation has been applied
  nUpshocked          ; number of owners putting their house for sale because their income has risen
  nDownshocked        ; number of owners putting their house for sale because their income has dropped
  nDemolished         ; number of houses demolished in this step
  medianPriceOfHousesForSale ; guess!

  ]

breed [houses house ]      ; a house, may be occupied and may be for sale
breed [owners owner ]      ; a household, may be living in a house, or may be seeking one
breed [realtors realtor ]  ; an estate agent
breed [records record ]    ; a record of a sale, kept by realtors

houses-own [
  my-owner            ; the owner who lives in this house
  local-realtors      ; the local realtors
  quality             ; index of quality of this house relative to its neighbours
  for-sale?           ; whether this house is currently for sale
  sale-price          ; the price of this house (either now, or when last sold)
  date-for-sale       ; when the house was put on the market
  my-realtor          ; if for sale, which realtor is selling it
  offered-to          ; which owner has already made an offer for this house
  offer-date          ; date of the offer (in ticks)
  end-of-life         ; time step when this house will be demolished
  ]

owners-own [
  my-house            ; the house which this owner owns
  income              ; current income
  mortgage            ; value of mortgage - reduces as it is paid off
  capital             ; capital that I have accumulated from selling my house
  repayment           ; my mortgage repayment amount, at each tick
  date-of-purchase    ; when my-house was bought
  made-offer-on       ; house that this owner wants to buy
  homeless            ; count of the number of periods that this owner has been
                      ;  without a house
  ]

realtors-own [
  my-houses           ; the houses in my territory
  sales               ; the last few house sales that I have made
  average-price       ; the average price of a house in my territory
  ]

records-own [         ; object holding a realtor's record of a transaction
  the-house           ; the house that was sold
  selling-price       ; the selling price
  date                ; the date of the transaction (in ticks)
  ]


to setup

  clear-all
  reset-ticks

;; set scenario to illustrate the effect of step changes.  scenario can
;; be one of
;     if scenario = "ltv"  [ set MaxLoanToValue 60 ]
;     if scenario = "ratefall" [ set InterestRate 3 ]
;     if scenario = "influx" [ set EntryRate 10 ]
;     if scenario = "poorentrants" [ set MeanIncome 24000 ]
;     if scenario = "clusters", continue for 400 steps

  set scenario "ratefall"

;; initialise globals
  set initialVacancyRate 0.05
  set nRealtors 6
  set maxHomelessPeriod 5
  set interestPerTick InterestRate / ( TicksPerYear * 100 )
  set min-price-fraction 0.1

  no-display

  ask patches [ set pcolor 57 ] ; muddy green colour

;; create and distribute the realtors (estate agents)

  set-default-shape realtors "cylinder"
  let direction random 360
  create-realtors nRealtors [
    set color yellow
    ; distribute realtors in a rough circle
    set heading direction
    jump (max-pxcor - min-pxcor) / 4
    set direction direction + 120 + random 30
    set size 3
    ; draw a circle to indicate this realtor's territory
    draw-circle RealtorTerritory
    ]

;; create and distribute the houses

  repeat (count patches * Density / 100) [ build-house ]

;; create the owners, one per house

  set-default-shape owners "dot"
  let occupied-houses n-of ((1 - initialVacancyRate) * count houses) houses
  ask occupied-houses [
    set for-sale? false
    hatch-owners 1 [
      set color gray
      set my-house myself
      ask my-house [set my-owner myself ]
      assign-income
      ; if required, artificially impose an income (and therefore a house price) gradient
      ;   on the distribution of house prices
      if InitialGeography = "Gradient" [ set income income * ( xcor + ycor + 50) / 50 ]
      ; set  mortgage to a multiple of my income
      set mortgage income * Affordability / ( interestPerTick * ticksPerYear * 100 )
      ; calculate value of the deposit for this house
      let deposit mortgage * ( 100 /  MaxLoanToValue - 1 )
      ; set value of house to the mortgage + deposit
      ask my-house [ set sale-price [mortgage] of myself + [deposit] of myself ]
      set repayment mortgage * interestPerTick /
                 (1 - ( 1 + interestPerTick ) ^ ( - MortgageDuration * TicksPerYear ))
      ]
    ]

   ; value all empty houses according to average values of local occupied houses
   let median-price median [ sale-price ] of houses with [ sale-price > 0 ]
   ask houses with [ sale-price = 0 ] [
     let local-houses houses with [distance myself < Locality and sale-price > 0]
     ifelse any? local-houses
       [ set sale-price  median [ sale-price ] of local-houses ]
       [ set sale-price  median-price ]
     ]

   if InitialGeography = "Clustered" [ cluster ]

   set medianPriceOfHousesForSale median [sale-price] of houses

   ask houses [
      ; calculate quality index as ratio of this house's price to the median house price
      set quality sale-price / medianPriceOfHousesForSale
      if quality > 3 [set quality 3] if quality < 0.3 [set quality 0.3]
      ]

   ; note the average price of a house in each realtor's territory

   ask realtors [
     set sales []
     set my-houses houses with [member? myself local-realtors ]
     set average-price median [ sale-price ] of my-houses
     ]

    ask houses [
     ; insert fake selling records in the histories of the realtors, so that they have
     ; something to base their step 0 valuations on, and specify an average level of
     ; buyer interest
     let the-record nobody
     hatch-records 1 [
       hide-turtle
       set the-house myself
       set selling-price [ sale-price ] of myself
       set the-record self
       ]
     set my-realtor one-of local-realtors
     ask my-realtor [ file-record the-record ]
     ]

   paint-houses

   display

   do-plots

   reset-ticks

end

to assign-income    ;; owner procedure
;; assigns the income and savings of a new owner
;; uses gamma (alpha, lambda) distribution
;; mean of a gamma distribution = alpha / lambda
; parameters taken from http://www2.physics.umd.edu/~yakovenk/papers/PhysicaA-370-54-2006.pdf
  let alpha 1.3
  let lambda 1 / 20000
  set income 0
  ; avoid impossibly low incomes (i.e. less than half the desired mean income)
  while [ income < MeanIncome / 2 ] [
    set income (MeanIncome * lambda / alpha ) * (random-gamma alpha lambda) *
                      (1 + (Inflation / (TicksPerYear * 100)) ) ^ ticks
    ]
  ; give them a proportion of a year's income as their savings
  set capital income * Savings / 100
end

to build-house     ;; observer procedure
;; add a single house to the town, in a random location
  create-houses 1 [
   ; house turtles are never displayed; instead the patch is used to show the
   ;  presence of a house
   hide-turtle
   ; for speed, dump the house anywhere, check if there is already a house there,
   ;  and if so, move to an empty spot
    move-to one-of patches
    if count houses-here > 1 [
      let empty-sites patches with [ not any? houses-here ]
      if any? empty-sites [ move-to one-of empty-sites ]
      ]
    ; assign to a realtor or realtors if in their territory
    set local-realtors realtors with [ distance myself < RealtorTerritory ]
    ; if no realtor, then choose nearest
    if not any? local-realtors [ set local-realtors turtle-set min-one-of realtors [ distance myself ] ]
    put-on-market  ; initially empty houses are for sale
    ; note how long this house will last before it falls down and is demolished
    set end-of-life ticks + int random-exponential ( HouseMeanLifetime * TicksPerYear )
    ]
end

to put-on-market        ;; house procedure
;; show that this house is for sale
    set for-sale? true
    set date-for-sale ticks
end

to draw-circle [radius]    ;; observer procedure
;; draw the circumference of a circle at the given radius
  hatch 1 [
    set pen-size 1 set color yellow set heading -90 fd radius
    set heading 0
    pendown
    while [heading < 359 ] [ rt 1 fd (radius * sin 1)  ]
    die
   ]
end

to paint-houses       ;; observer procedure
;; recolor patches to show the current sale price of houses
; use log sale -price to get a better variation in colour
  let ln-min-price ln [sale-price] of min-one-of houses [sale-price]
  let ln-max-price ln [sale-price] of max-one-of houses [sale-price]
  ask houses [
;    set pcolor palette:scale-scheme "Divergent" "RdYlBu" 10 (ln sale-price) ln-min-price ln-max-price
    set pcolor scale-color red (ln sale-price) ln-min-price ln-max-price
    ]
end

to cluster          ;; observer procedure
;; move the houses (and their owners) so that they are adjacent to other houses in the same
;; price range

  ; repeatedly move houses, so that they get a bit more clustered each time
  repeat 3 [

    ; start by moving houses that are most wrong
;     let houses-to-move sort-by [ price-diff ?1 > price-diff ?2 ] houses   ;; old-version
    let houses-to-move sort-by [ [ house1 house2 ] ->  price-diff house1 > price-diff house2 ] houses  ;; new-version
;
;    show length houses-to-move ;; debug, must have show or type or print in front of length
;    user-message (word "number of houses-to-move" length houses-to-move ) ;; it is better way debug, and count a list
;    user-message (word "number of houses" count houses) ;; count agentset
;    foreach houses-to-move [ h -> user-message (word "foreach houses-to-move [ h -> inspect h"  price-diff h ) ]  ;; debugging


    foreach houses-to-move [
      ; only move a house if the price difference between it and its local neighbors is
      ; greater than a constant
;      if price-diff ? > 10000 [  ;; old-version
      x -> if price-diff x > 10000 [  ;; new-version
        ; find a vacant patch with neighbours in the right price bracket and move
        ; the house there
        let vacant-plot one-of patches with [ not any? houses-here and
;                                  abs (local-price - [sale-price] of ?) < 10000 ]  ;; old-version
                                   abs (local-price - [ sale-price ] of x ) < 1000 ]  ;; new-version

        if vacant-plot != nobody [
;          ask ? [ move-to vacant-plot ]  ;; old-version
          ask x [ move-to vacant-plot ]  ;; new-version

          ]
        ]
      ]
    ]
    ; make sure the owners are located in their own houses
    ask houses [
      if is-owner? my-owner [ ask my-owner [ move-to myself ] ]
      ]

end

to-report local-price         ;; house procedure
;; report the average price of houses around myself
  let local-houses houses-on neighbors
  ifelse any? local-houses
    [ report median [sale-price] of local-houses ]
    [ report 0 ]
end

to-report price-diff [ a-house ]  ;; house procedure
;; report the difference between my sale price and the prices of other houses around me
  report abs ([sale-price] of a-house - [local-price] of a-house)
end


to go
;; basic loop
   if ticks > 400 [ stop ]
   if ticks = 200 [
     if scenario = "ltv"  [ set MaxLoanToValue 60 ]
     if scenario = "ratefall" [ set InterestRate 3 ]
     if scenario = "influx" [ set EntryRate 10 ]
     if scenario = "poorentrants" [ set MeanIncome 24000 ]
     ]
  ; do one time step (a quarter of a year?)
  step
  ; stop if no owners or houses left
  if not any? owners [ print "Finished: no remaining people" stop ]
  if not any? houses [ print "Finished: no remaining houses" stop ]
  ; update the plots
  do-plots
  ; advance the clock
  tick
end

to step
;;  each time step...

  let n-owners count owners

  ; add an exogenous cyclical interest rate, if required: varies around mean of
  ; the rate set by slider with a fixed period of 10 years

  set interestPerTick InterestRate / ( TicksPerYear * 100 )
  if CycleStrength > 0 [
    set interestPerTick interestPerTick * (1 + (CycleStrength / 100 ) *
                                            sin ( 36 * ticks / TicksPerYear ))
    ]

  ; add inflation to salary, at inflation rate / TicksPerYear
  if Inflation > 0 [
    ask owners [ set income income * (1 + Inflation / ( TicksPerYear * 100 )) ]
    ]

  let owner-occupiers owners with [ is-house? my-house ]

  ; some have an income shock
  let shocked-owners n-of (Shocked * count owner-occupiers / 100) owner-occupiers
  ; either a shock of 20% more income than before
  let upshocked n-of (count shocked-owners / 2) shocked-owners
  set nUpShocked 0
  ask upshocked [ set income income * 1.2 ]
   ; or a shock of 20% less income than before
  let downshocked shocked-owners with [ not member? self upshocked ]
  set nDownShocked 0
  ask downshocked [ set income income * 0.8 ]

  ask owner-occupiers with [ not [for-sale?] of my-house ][
   ; if they are now spending less than half the Affordability ratio of their
   ; income on their mortgage repayments, they want to move up
   let ratio repayment * TicksPerYear / income
   if  ratio < Affordability / 200 [
      ask my-house [ put-on-market ]
      set nUpShocked nUpShocked + 1
      ]
     ; if they are now spending more than twice the Affordability ratio of
     ; their income on their mortgage repayments, they want to move down
   if ratio > Affordability / 50 [
      ask my-house [ put-on-market ]
      set nDownShocked nDownShocked + 1
      ]
   ]

  ; some owners put their houses on the market and leave town
  ask n-of (ExitRate * n-owners / 100) owners with [ is-house? my-house ] [
    ask my-house [
      put-on-market
      set my-owner nobody
      ]
    die
    ]

  ; some new owners arrive
  create-owners EntryRate * n-owners / 100 [
    set color gray
    ; set initial income and savings
    assign-income
    ; give them an initial capital equal to the deposit for the house they could afford
    ; new owners are not located anywhere yet
    hide-turtle
    ]

  ; note that those without houses are homeless for another period, and remove those who
  ; have given up waiting for a house

  if MaxHomelessPeriod  > 0 [ ; after this number of periods, the homeless emigrate
       ask owners with [ not is-house? my-house ] [
         set homeless homeless + 1
         if homeless > maxHomelessPeriod [ die ]
         ]
      ]

  ; those who are paying mortgages greater than their income, are forced to move out
  ; of the housing market and their house is put up for sale

  ask owner-occupiers with [ [for-sale?] of my-house and
                              repayment * TicksPerYear > income ] [
    ask my-house [ set my-owner nobody ]
    die
    ]

  ; some new houses are built, and put up for sale

  repeat count houses * HouseConstructionRate / 100 [
  ; ensure that there are vacant patches before building a house
  ; if there are not, no more houses are built
    if any? patches with [ not any? houses-here ]  [ build-house ]
    ]
  ask houses with [ quality = 0 ] [ ; these are the new houses
      ; calculate quality index as the mean of the qualities of those in the locality
      ; or set to 1 if there aren't any houses around here
      let houses-around-here other houses in-radius Locality
      set quality ifelse-value any? houses-around-here
        [ mean [ quality ] of houses-around-here ]
        [ 1 ]
      if quality > 3 [set quality 3] if quality < 0.3 [set quality 0.3]
      ]

  ; for houses that are newly for sale, get the sale price, which is the highest
  ; valuation offered by local realtors. (Houses that remain for sale,
  ; not having been sold in the previous round, already have a sale price)
  ; Colour the house accordingly.

  let houses-for-sale houses with [ for-sale? ]
  if any? houses-for-sale [
    ask houses-for-sale with [ date-for-sale = ticks ] [
      set my-realtor max-one-of local-realtors [ valuation myself ]
      set sale-price [ valuation myself ] of my-realtor
      ]

    ; update the average selling price of houses in each realtor's territory
    ask realtors [
      let my-houses-for-sale houses-for-sale with [ member? myself local-realtors ]
      if any? my-houses-for-sale [ set average-price median [ sale-price ] of my-houses-for-sale ]
      ]

    set medianPriceOfHousesForSale median [sale-price] of houses-for-sale
    ]

  paint-houses

  ; buyers (new entrants and those wishing to sell) search for a suitable property to buy

  let buyers owners with [ not (is-house? my-house) or ([ for-sale? ] of my-house) ]

  ;; those with nothing to sell get priority in making an offer; i.e. they go first

  ask owners with [ not (is-house? my-house) ] [
    make-offer houses-for-sale
    ]

  ; and now those who do have a house to sell get a chance to make an offer

  ask owners with [ (is-house? my-house) and ([ for-sale? ] of my-house) ] [
    make-offer houses-for-sale
    ]

   ; Check which chains will complete.  A chain of buyers and sellers will complete only
   ;  if the first buyer has nothing to sell, and the last seller has nothing to buy
   ; This means that the first buyer must be a new entrant, and the last house must
   ;  be vacant

   set moves 0
   ask buyers with [ not is-house? my-house and is-house? made-offer-on ] [
     if follow-chain self [
       ; this buyer is the start of a successful chain
       ; call in the removal firm!
       move-house
     ]
   ]

   ; realtors forget any sale records that are too old

   ; kill old records
   ask records [ if date < (ticks - RealtorMemory) [ die ] ]
   ; remove references to outdated records
   ask realtors [ set sales remove nobody sales ]

   ; cancel any outstanding offer

   ask houses with [ is-owner? offered-to ] [
     ask offered-to [ set made-offer-on nobody ]
     set offered-to nobody
     set offer-date 0
     ]

   ; demolish any house that is either at the end of its life or that is no longer
   ;  worth much

   set nDemolished 0
   if any? records [
     let minimum-price min-price-fraction * medianPriceOfHousesForSale

     ask houses with [ (ticks > end-of-life) or
                       (for-sale? and sale-price <  minimum-price )] [ demolish ]
    ]

  ; any house that is still for sale has its price reduced

  ask houses with [ for-sale? ] [
     set sale-price sale-price * (1 - PriceDropRate / 100 )
     ]

  ; owners that have a mortgage have to pay interest and some capital
  ; the mortgage is reduced by the amount of capital repayment
  ask owners with [ is-house? my-house and mortgage > 0 ] [
    set mortgage mortgage - ( repayment - interestPerTick * mortgage )
    ; check if mortgage has now been fully repaid; if so cancel it
    if mortgage <= 0 [
      set mortgage 0
      set repayment 0
      ]
    ]

end

to-report valuation [ property ]    ;; realtor procedure
 ;; A realtor values a property by looking in its records for sales
 ;; that it has made of houses in the locality to use as a guide to the
 ;; value of this property.
 ;; The value of the property is then:
 ;;   the median of the selling prices of these local houses,
 ;;   multiplied by this house's quality index
 ;;   multiplied by an optimism factor
 ;;   multiplied by a normalisation factor.
 ;; If the realtor has no sales in the locality, it bases the price on the
 ;;  median price of all the sale prices of local houses, or if there are
 ;;  none of those either, on the avergae price of all houses in the
 ;;  realtor's territory.

  let multiplier [ quality ] of property *
                  (1 + RealtorOptimism / 100) *
  ;                0.9
 1


;  ask sales [ if [ who ] of self = 2156  [ inspect self user-message (word "let's have a look") ]  ]
;  foreach sales [ x -> if [ who ] of x = 5558 [ inspect x
;                                              user-message (word "let inspect records with 2156") ]  ]  ;; debugging and inspecting

;    let local-sales (turtle-set sales) with [ ( [distance property ] of the-house ) < Locality ]  ;; old-version
  let local-sales (turtle-set sales) with [ the-house != nobody and ( [distance property ] of the-house ) < Locality ]  ;; new-version

;  set inspect-object local-sales                                      ;; debugging and inspection on local-sales

;  user-message ( word "local-sales is created, let's inspect inspect-object " ticks )
;  ask inspect-object [ show who ]
;  user-message ( word "we are reading all records ids")
;  ask inspect-object [
;                      inspect self
;                      user-message (word "take a look at " [ breed ] of self " with ID " [ who ] of self )
;                      inspect [the-house ] of self
;                      user-message (word "what breed is the-house " [ breed ] of [the-house] of self )
;                      stop-inspecting [the-house] of self
;                      stop-inspecting self
;  ]



  let old-price [sale-price] of property
  let new-price 0
  ifelse any? local-sales
    [ set new-price median [ selling-price ] of local-sales ]
    [ let local-houses houses with [ distance myself <= Locality ]
      ifelse any? local-houses
        [set new-price median [sale-price] of local-houses ]
        [set new-price average-price ]
      ]
  ; if this is a new valuation, return it
  if old-price < 5000 [ report multiplier * new-price ]
  ; otherwise prevent wild changes in price
  let ratio new-price / old-price
  let threshold 2
  ifelse ratio > threshold
    [ set new-price threshold * old-price ]
    [ if ratio < 1 / threshold [  set new-price old-price / threshold ] ]
  report  multiplier * new-price
end

to make-offer [ houses-for-sale ]      ;; owner procedure
 ;;  Search for properties that:
 ;;    is for sale
 ;;    is not already under offer
 ;;    costs no more than my budget
 ;;    is not the house I am already occupying
 ;;  but look at only buyer-search-length number of properties
 ;;  and make an offer on the most expensive of these.
 ;;  My budget is the sum of:
 ;;   the value of the mortgage I can get on the new house = affordability * income / interest rate
 ;;   plus the (projected) sale price of my current house
 ;;   minus the amount I need to pay back to the lender for my current mortgage,
 ;;   plus the amount of accumulated capital I have
 ;;   minus any stamp duty payable
 ;;  But I must have a sufficiently large cash deposit available
 ;;  The realtor notes the interest shown in each of the houses in this subset

  let new-mortgage income * Affordability / ( interestPerTick * ticksPerYear * 100 )
  let budget new-mortgage - stamp-duty-land-tax new-mortgage

  let deposit capital
  if is-house? my-house [ set deposit deposit + ([ sale-price ] of my-house - mortgage) ]

  let upperbound budget + deposit
  if MaxLoanToValue < 100 [
    set upperbound min ( list (budget + deposit ) ( deposit / ( 1 - MaxLoanToValue / 100 )))
    ]

  ; if I am in negative equity, I cannot afford to buy a house and
  ;  will have to remain where I am
  if upperbound < 0 [
    ask my-house [ set for-sale? false ]
    stop
    ]

  let lowerbound upperbound * 0.7
  let current-house my-house
  let interesting-houses houses-for-sale with [
                            not is-owner? offered-to and
                            sale-price <= upperbound and
                            sale-price > lowerbound and
                            self != current-house ]

  ; if there are more interesting houses than the buyer's search length,
  ;   select that number at random
  if count interesting-houses > BuyerSearchLength [
    set interesting-houses n-of BuyerSearchLength interesting-houses
    ]

  if any? interesting-houses [
    ;select the best that has not already had an offer on it
    let property max-one-of interesting-houses [ sale-price ]
    ; if I have found a suitable property, place an offer for it
      if is-house? property [
        ask property [
          set offered-to myself
          set offer-date ticks
        ]
        set made-offer-on property
        ]
     ]
end

to-report stamp-duty-land-tax [ cost ]
  ;; stamp duty land tax ('stamp duty') is 1% for sales over �150K, 3% over �250K, 4% over
  ;;  �500K,  (see http://www.hmrc.gov.uk/so/rates/index.htm )
  if StampDuty [
    if cost > 500000 [ report 0.04 * cost ]
    if cost > 250000 [ report 0.02 * cost ]
    if cost > 150000 [ report 0.01 * cost ]
    ]
  report 0
end

to-report follow-chain [ first-link ]    ;;  owner procedure
 ;; Find the end of the chain which has my house as a link:
 ;;   find the house I have made an offer for (If none, this chain fails; Stop)
 ;;   find the current owner of that house (If none, this is a successful chain; Stop )
 ;;   find the house they made an offer for ...
 ;; continue until the seller of that house is the first buyer.
 ;;   This is a successful chain; Stop

  if not is-house? made-offer-on [ report false ]
  let seller [ my-owner ] of made-offer-on
  if not (is-owner? seller ) [ report true ]
  if first-link = seller [ report true ]
  report [follow-chain first-link ] of seller
end

to move-house                            ;; owner procedure
 ;; move me to the house I am buying
 ;; then move the seller to their new house etc.

  let new-house made-offer-on
  if not (is-house? new-house) [ stop ]
  let seller [ my-owner ] of new-house
  if is-owner? seller [
    ; seller gets selling price to pay off mortgage or add to capital
    let profit [ sale-price ] of new-house - [ mortgage ] of seller
    ask seller [ set mortgage 0 ]
    if profit > 0 [
      ; seller has made a profit, which is kept as capital
      ask seller [ set capital capital + profit ]
      ]
    ]
  ask new-house [ set my-owner myself ]
  let duty stamp-duty-land-tax [ sale-price ] of new-house
  ifelse [ sale-price ] of new-house > capital
    ; if the owner can't pay for the house in cash, s/he has to have a mortgage
    [
    ; borrow as much as possible, given owner's income and value of house
    set mortgage min (list (income * Affordability /
                                        ( interestPerTick * ticksPerYear * 100 ))
                           ([ sale-price ] of new-house * MaxLoanToValue / 100 ))
    ; pay rest from capital
    set capital capital - int ([ sale-price ] of new-house - mortgage) - duty
    set repayment mortgage * interestPerTick /
            (1 - ( 1 + interestPerTick ) ^ ( - MortgageDuration * TicksPerYear ))
    ]
    ; or if cash buyer, don't need mortgage and use capital
    [
    set mortgage 0
    set repayment 0
    set capital capital - [ sale-price ] of new-house - duty
    ]
  if capital < 0 [ set capital 0 ]
  show-turtle ; new entrants are not visible until now
  move-to new-house ; move owner icon on view
  set homeless 0
  set my-house new-house
  set date-of-purchase ticks
  ask new-house [
    set for-sale? false
    set offered-to nobody
  ]
  set made-offer-on nobody
  ;; update realtor's history with this sale price
  hatch-records 1 [
    hide-turtle
    set date ticks
    set the-house new-house
    set selling-price [sale-price] of new-house
    ask [ my-realtor ] of new-house [ file-record myself ]
    ]
  set moves moves + 1
  if is-owner? seller [ ask seller [ move-house ] ]
end

to file-record [ the-record ]         ;; realtor procedure
  ; push this sales record onto the list of those I keep
  set sales fput the-record sales
end

to unfile-record [ a-house ]          ;; realtor procedure
  ; delete any record that mentions the house

;  set sales filter [ [the-house] of ? != a-house ] sales  ;; old-version
  set sales filter [ s -> [the-house] of s != a-house ] sales   ;; new-version

;  foreach sales [ x -> if [the-house] of x = a-house [ inspect x user-message ( word " a matched house in sales " )
;                                                       inspect a-house user-message (word "inspect a-house")  ] ]  ;; debugging
end

to demolish                           ;; house procedure
;; delete the house, but make sure all references to it are dealt with
  ; if anyone lives here, make them homeless
  if is-owner? my-owner [
    ask my-owner [
      set my-house nobody
      ; cancel mortgage
      set mortgage 0
      set repayment 0
      hide-turtle  ; owner is homeless
      ]
    ]
  ; if this house is on a realtor's record, remove the record
  ask realtors [ unfile-record myself ]
  ; turn the land the house was built on back to grass
  set pcolor 57
  ; record the demolition
  set nDemolished nDemolished + 1
  die
end

to-report gini-index [ lst ]
;; reports the gini index of the values in the given list
;; Actually returns the gini coefficient (between 0 and 1) - the
;; gini index is a percentage

  let sorted sort lst
  let total sum sorted
  let items length lst
  let sum-so-far 0
  let index 0
  let gini 0
  repeat items [
    set sum-so-far sum-so-far + item index sorted
    set index index + 1
    set gini  gini + (index / items) - (sum-so-far / total)
  ]
  ; only accurate if items is large
  report 2 * (gini / items)
end



to do-plots
;; draw a range of plots

  let houses-for-sale houses with [ for-sale?  and sale-price > 0 ]
  let houses-sold records

  set-current-plot "Homes"
  set-current-plot-pen "All houses"
  plot count houses
  set-current-plot-pen "Seeking a home"
  plot count owners with [ not is-house? my-house ]
  set-current-plot-pen "Empty houses"
  plot count houses with [ not is-owner? my-owner ]
  set-current-plot-pen "In -ve equity"
  plot count houses with [ is-owner? my-owner and (sale-price  < [mortgage] of my-owner) ]
  set-current-plot-pen "Demolished"
  plot nDemolished

  set-current-plot "People"
  set-current-plot-pen "Population"
  plot count owners
  set-current-plot-pen "10 x Moving up"
  plot 10 * nUpShocked
  set-current-plot-pen "10 x Moving down"
  plot 10 * nDownShocked

  if any? houses-for-sale [
    set-current-plot "House price distribution"
    set-plot-pen-interval 1000
    set-plot-x-range 0 1000000
    set-current-plot-pen "For sale"
    histogram [ sale-price ] of houses-for-sale
    set-current-plot-pen "All"
    histogram [ sale-price ] of houses
    set-current-plot-pen "New sales"
    histogram [ sale-price ] of houses-for-sale with [ date-for-sale = ticks ]
    ]

  if any? owners [
     set-current-plot "Income distribution"
     set-plot-pen-interval 1000
     set-plot-x-range 0 ifelse-value (max [income] of owners > 1E+5) [ 1E+6 ] [ 1E+5 ]
     histogram [ income ] of owners
    ]

  set-current-plot "Median house prices"
  ifelse any? houses-for-sale [
    set-current-plot-pen "For sale"
    plot medianPriceOfHousesForSale
    ]
    [ plot 0 ]
  set-current-plot-pen "Sold"
  let medianSellingPriceOfHouses 0
  if any? houses-sold [ set medianSellingPriceOfHouses median [ selling-price ] of houses-sold ]
  plot medianSellingPriceOfHouses


  set-current-plot "Gini index"
  set-current-plot-pen "Prices"
  if any? houses-sold [ plot gini-index [ selling-price ] of houses-sold ]
  set-current-plot-pen "Incomes"
  if any? owners [ plot gini-index [ income ] of owners ]

  if any? owners [
    set-current-plot "Mortgage repayment / income"
    plot mean [ TicksPerYear * repayment / income ] of owners with [ repayment > 0 ]
    ]

  if any? houses-sold and any? owners[
    set-current-plot "Median house price / Median income"
    plot medianSellingPriceOfHouses / median [ income ] of owners
    ]

  if any? houses-for-sale [
    set-current-plot "Median time on market"
    plot median [ ticks - date-for-sale ] of houses-for-sale
    ]

  set-current-plot "Transactions"
  plot moves

  set-current-plot "Rates"
  set-current-plot-pen "Interest Rate"
  plot interestPerTick * TicksPerYear * 100
  set-current-plot-pen "Inflation Rate"
  plot Inflation

  if any? owners [
     set-current-plot "Capital"
     set-plot-pen-interval 1000
     set-plot-x-range 0 100000
     histogram [ capital ] of owners
     ]
end

;; two procedures to enable large numbers of owners to be added to, or removed from the market
;; for experimentation with the model
;;
;; to use, type into the command centre (for example):  make-owners 500
;;

to make-owners [ n ]
 ;; make some new owners arrive
  create-owners n [
    set color gray
    ; set initial income and savings
    assign-income
    ; new owners are not located anywhere yet
    hide-turtle
    ]
end

to kill-owners [ n ]
 ;; make some owners put their houses on the market and leave town
  ask n-of n owners with [ is-house? my-house ] [
    ask my-house [
      put-on-market
      set my-owner 0
      ]
    die
    ]
end
